<html>
<head>
<title>ConDec Project Settings</title>
<meta name="decorator" content="atl.admin" />
<meta name="admin.active.section" content="atl.jira.proj.config" />
<meta name="admin.active.tab"
	content="decdoc-project-settings-menu-item" />
<meta name="projectKey" content="$projectKey" />
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:decision-knowledge-management-resources")
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:stylesheet-and-icon-resources")
</head>
<body>
<form class="aui">
<h1>Continuous Management of Decision Knowledge (ConDec)</h1>

#parse("templates/settings/basicSettings.vm")

#parse("templates/settings/rationaleModelSettings.vm")

#parse("templates/settings/classificationSettings.vm")

#parse("templates/settings/gitSettings.vm")

#parse("templates/settings/webhookSettings.vm")

#parse("templates/settings/releaseNotesSettings.vm")
	

<script>
	var activationToggle = document.getElementById('isActivated-toggle');
	if ($project.isActivated() == true) {
		activationToggle.checked = true;
	} else {
		activationToggle.checked = false;
	};
	
	var strategyToggle = document.getElementById('isIssueStrategy-toggle');
	if ($project.isIssueStrategy() == true) {
		strategyToggle.checked = true;
	} else {
		strategyToggle.checked = false;
	};
	
	var issueCommentsToggle = document.getElementById('isKnowledgeExtractedFromIssues-toggle');
	if ($project.isKnowledgeExtractedFromIssues() == true) {
		issueCommentsToggle.checked = true;
	} else {
		issueCommentsToggle.checked = false;
	};
	
	var isClassifierUsedToggle = document.getElementById('isClassifierUsed-toggle');
	if ($project.isClassifierUsedForIssueComments() == true) {
		isClassifierUsedToggle.checked = true;
	} else {
		isClassifierUsedToggle.checked = false;
	};
	
	var clearSentenceDatabaseButton = document.getElementById("validateSentenceDatabase");
	clearSentenceDatabaseButton.addEventListener("click", function() {
		conDecAPI.clearSentenceDatabase('$projectKey');
	});
	
	var sentenceIconToggle = document.getElementById('iconParsing-toggle');
	if ($project.isIconParsingEnabled() == true) {
		sentenceIconToggle.checked = true;
	} else {
		sentenceIconToggle.checked = false;
	};


	var evaluateModelButton = document.getElementById("evaluateModel-button");
	evaluateModelButton.addEventListener("click", function () {
		conDecAPI.evaluateModel('$projectKey', saveToFile("evaluation_results.json"));
	});
	
	var saveArffFileButton = document.getElementById("saveArffFile-button");
    saveArffFileButton.addEventListener("click", function () {
    	conDecAPI.saveArffFile('$projectKey', true, saveToFile("ClassifierTrainingData.arff"));
    });


	var saveAllArffFileButton = document.getElementById("saveAllArffFile-button");
	saveAllArffFileButton.addEventListener("click", function () {
		conDecAPI.saveArffFile('$projectKey', false, saveToFile("AllClassifierTrainingData.arff"));
	});

    var trainClassifier = document.getElementById("trainClassifier-button");
    trainClassifier.addEventListener("click", function() {
        if (confirm('Are you sure you want to retrain the classifier?')) {
            var trainDataSelect = document.getElementById("select-arff-file-train");
            var isNewTrained = conDecAPI.trainClassifier('$projectKey', trainDataSelect.value);
            console.log(trainDataSelect.value);
        }
    });
				
	var gitToggle = document.getElementById('isKnowledgeExtractedFromGit-toggle');
	if ($project.isKnowledgeExtractedFromGit() == true) {
		gitToggle.checked = true;
	} else {
		gitToggle.checked = false;
	};
	
	var gitSubmitButton = document.getElementById('git-uri-button');
	gitSubmitButton.addEventListener("click", function() {
		var gitUri = document.getElementById('git-uri-input-field').value;
		conDecAPI.setGitUri('$projectKey', gitUri);
		window.onbeforeunload = null;
	});
	
	var webhookToggle = document.getElementById('isWebhookEnabled-toggle');
	if ($project.isWebhookEnabled() == true) {
		webhookToggle.checked = true;
	} else {
		webhookToggle.checked = false;
	};
	
	var webHookSubmit = document.getElementById('submitWebhook');
	webHookSubmit.addEventListener("click", function() {
		var urlInput = document.getElementById("webhook-url");
		var secretInput = document.getElementById("webhook-secret");
		conDecAPI.setWebhookData('$projectKey', urlInput.value, secretInput.value);
		window.onbeforeunload = null;
	});
	
	activationToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setActivated(this.checked, this.value);
		this.busy = false;
	});
	
	strategyToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setIssueStrategy(this.checked, this.value);
		this.busy = false;
	});
	
	for (j in additionalKnowledgeTypes) {
		conDecAPI.isKnowledgeTypeEnabled(typeToggles[j].value, '$projectKey', typeToggles[j], function(isTypeEnabled, toggle) {				
	    	toggle.checked = isTypeEnabled;
		});
	    typeToggles[j].addEventListener('change', function (error) {
	        this.busy = true;
	        conDecAPI.setKnowledgeTypeEnabled(this.checked, this.value, '$projectKey');
	        this.busy = false;
	    });           
	}
	
	issueCommentsToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setKnowledgeExtractedFromIssues(this.checked, this.value);
		this.busy = false;
	});
	
	isClassifierUsedToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setUseClassifierForIssueComments(this.checked, this.value);
		this.busy = false;
	});
	
	sentenceIconToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setIconParsing(this.value, this.checked);
		this.busy = false;
	});
	
	gitToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setKnowledgeExtractedFromGit(this.checked, this.value);
		this.busy = false;
	});

	webhookToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setWebhookEnabled(this.checked, this.value);
		this.busy = false;
	});

    function getMultipleSelectedValue()
    {
        var x = document.getElementById("select-root-types");
        for (var i = 0; i < x.options.length; i++) {
            if(x.options[i].selected == true){
                conDecAPI.setWebhookType(x.options[i].value, '$projectKey', "true");
            }
            else {
                conDecAPI.setWebhookType(x.options[i].value, '$projectKey', "false");
            }
        }
    }

    function getReleaseNotesMultipleSelectedValues(type) {
        var x = document.getElementById("select-issue-type-" + type);
        var selectedItems = [];
        for (var i = 0; i < x.options.length; i++) {
            if (x.options[i].selected == true) {
                selectedItems.push(x.options[i].value)
            }
        }
        conDecAPI.setReleaseNoteMapping(type.toUpperCase(), '$projectKey', selectedItems);
    }

    var saveToFile = function (name) {
    	return function(content){
			var link = document.createElement('a');
			link.style.display = 'none';
			link.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
			link.setAttribute('download', name);
			document.body.appendChild(link);
			link.click();
			document.body.removeChild(link);
		}
	}

</script>
</form>
</body>
</html>
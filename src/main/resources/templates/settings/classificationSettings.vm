<h2>Text Classification in Jira Issue Description and Comments</h2>

<div class="field-group">
    <label for="isClassifierUsed-toggle">Use Classifier to identify Decision Knowledge?</label>
    <aui-toggle id="isClassifierUsed-toggle"
                value="$projectKey" label="Use Classifier to Identify Decision Knowledge?"></aui-toggle>
    <div class="description">Enables or disables whether text is automatically classified
        as decision knowledge within Jira issue description and comments for this project.
    </div>
</div>

<div class="field-group" id="classifierStatus-text">
    <label>Current Classifier Status:</label>
    <div class="description">
        #if( $isClassifierTraining == "true" )
            <div class="aui-message aui-message-warning">
                <p class="title">
                    <strong>The classifier is currently training!</strong>
                </p>
            </div>
        #else
            <div class="aui-message aui-message-info">
                <p class="title">
                    <strong>The classifier is currently not training!</strong>
                </p>
            </div>
        #end
        #if( $isClassifierTrained == "true" )
            <div class="aui-message aui-message-info">
                <p class="title">
                    <strong>The classifier has already been trained!</strong>
                </p>
                <p>
                    If you have enough annotated data from your own project you might want to retrain it on
                    your project.
                    Generate a CSV file of validated decision knowledge and then select the file as the training file.
                </p>
            </div>
        #else
            <div class="aui-message aui-message-error">
                <p class="title">
                    <strong>The classifier is not yet trained!</strong>
                <p>
                    Start the training or wait for it to finish. Otherwise the classification will not work.
                </p>
            </div>
        #end
    </div>
</div>

<div class="field-group">
    <label for="classifyAllIssuesInProject">Suggest Tags for Whole Project?</label>
    <input type="button" class="aui-button" id="classifyAllIssuesInProject" value="Classify all Comments"/>
    <div class="description">Classifies decision knowledge for all issue comments for this project.</div>
    <div class="aui-progress-indicator">
        <span id="classify-whole-project-progress-bar"></span>
    </div>
</div>

<div class="field-group">
    <label for="evaluateModel-button">Evaluate Classifier</label>
    <input type="button" class="aui-button" id="evaluateModel-button" value="Evaluate model"/>
    <div class="description">Evaluate the current classifier model using the user-validated data in the database. (If the
        evaluation fails the classifier might need to be trained!)
    </div>
    <div class="aui-progress-indicator">
        <span id="evaluate-classifier-progress"></span>
    </div>
</div>

<div class="field-group">
    <label for="saveTrainingFile-button">Create a Training File</label>
    <input type="button" class="aui-button" id="saveTrainingFile-button" value="Create Training File"/>
    <div class="description">Creates a training file (in csv format) of <b>user-validated</b> text data
        for the current project that can be used to train the classifier.
        This file is saved in the Jira home directory in data/condec-plugin/project-key. You can download it from there.
        If you want to train the classifier with this file you need to reload this page to access the file.
    </div>
</div>

<div class="field-group">
    <label for="trainClassifier-button">Train the Classifier</label>
    <select id="select-training-file" name="select-training-file" class="select medium-long-field">
        #foreach ($trainingFile in $trainingFiles)
            <option value="$trainingFile"
                #if ($trainingFile.toString().contains($selectedTrainingFile))
                    selected
                #end
            >
                $trainingFile</option>
        #end
    </select>
    <input type="button" class="aui-button" id="trainClassifier-button" value="Train Classifier"/>
    <div class="description">
        Trains the classifier on the selected training data file. <br/>
        <span class="aui-icon aui-icon-small aui-iconfont-warning">WARNING: </span> Please note that this initial
        training can be very resource expensive!
    </div>
    <div class="aui-progress-indicator">
        <span id="train-classifier-progress"></span>
    </div>
</div>

<div class="field-group">
    <label for="testClassifierWithText-input">Test the Classifier</label>

    <textarea class="textarea" name="testText-input"
              id="testClassifierWithText-input" placeholder="Your text to be classified here..."></textarea>
</div>
<div class="buttons-container">
    <div class="buttons">
        <input type="button" class="aui-button" id="testClassifierWithText-button" value="Test classifier"/>

        <span class="cancel" id="testClassifierWithText-result">The result will be displayed here.</span>
    </div>
</div>

<script>
    // init the variables
    const isClassifierUsedToggle = document.getElementById("isClassifierUsed-toggle");
    isClassifierUsedToggle.checked = $project.isClassifierEnabled();

    const testClassifierWithTextBtn = document.getElementById("testClassifierWithText-button");
    const testClassifierWithTextInput = document.getElementById("testClassifierWithText-input");
    const testClassifierWithTextResult = document.getElementById("testClassifierWithText-result");

    const currentClassifierStatusInfo = document.getElementById("classifierStatus-text");
    currentClassifierStatusInfo.style.display = isClassifierUsedToggle.checked ? "inherit" : "none";

    // add listeners
    testClassifierWithTextBtn.addEventListener('click', () =>{
       conDecAPI.testClassifierWithText(testClassifierWithTextInput.value,"$projectKey", testClassifierWithTextResult)
    });
    const evaluateModelButton = document.getElementById("evaluateModel-button");
    evaluateModelButton.addEventListener("click", function () {
        var animatedElement = document.getElementById("evaluate-classifier-progress");
        conDecAPI.evaluateModel("$projectKey", animatedElement, saveToFile("evaluation_results.json"));
    });

    const saveTrainingFileButton = document.getElementById("saveTrainingFile-button");
    saveTrainingFileButton.addEventListener("click", function () {
        conDecAPI.saveTrainingFile("$projectKey", saveToFile("classifierTrainingData.csv"));
    });

    const classifyAllIssuesInProjectButton = document.getElementById("classifyAllIssuesInProject");
    classifyAllIssuesInProjectButton.addEventListener("click", function () {
        if (confirm("Are you sure you want to classify all Jira issue comments and descriptions? This might take a long time if the project is big.")) {
            var animatedElement = document.getElementById("classify-whole-project-progress-bar");
            conDecAPI.classifyWholeProject("$projectKey", animatedElement);
        }
    });

    const trainClassifier = document.getElementById("trainClassifier-button");
    trainClassifier.addEventListener("click", function () {
        if (confirm("Are you sure you want to retrain the classifier?")) {
            var trainDataSelect = document.getElementById("select-training-file");
            var animatedElement = document.getElementById("train-classifier-progress");
            conDecAPI.trainClassifier("$projectKey", trainDataSelect.value, animatedElement);
        }
    });

    isClassifierUsedToggle.addEventListener("change", function (error) {
        currentClassifierStatusInfo.style.display = this.checked ? "inherit" : "none";
        this.busy = true;
        conDecAPI.setUseClassifierForIssueComments(this.checked, this.value);
        this.busy = false;
    });

    // helper functions
    const saveToFile = function (name) {
        return function (content) {
            let link = document.createElement("a");
            link.style.display = "none";
            link.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(content));
            link.setAttribute("download", name);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
</script>
<h2>Decision Knowledge Extraction from Git</h2>

<div class="field-group">
    <label for="isKnowledgeExtractedFromGit-toggle">Extract from Git?</label>
    <aui-toggle id="isKnowledgeExtractedFromGit-toggle"
                value="$projectKey" label="Extract from	Git?"></aui-toggle>
    <div class="description">Enables or disables whether decision
        knowledge is extracted from git for this project.
    </div>
</div>

<div class="field-group">
	<label for="git-uri-input-field">Git Repositories</label>
	<div id="repo-wrapper">
    #set( $repoNumber = 1 )
    #foreach($gitRepositoryConfiguration in $project.getGitRepositoryConfigurations())
        
        <div class="aui-group" id="repodiv$repoNumber">
            URI: 
            <input type="text" class="text long-field repo$repoNumber" value="$gitUri" placeholder="https://github.com/cures-hub/cures-condec-jira.git"/>&nbsp;
            <input type="button" id="delete-entry$repoNumber" class="aui-button aui-button-primary" value="Delete entry"/>
            <br />
            Default Branch: 
            <input type="text" class="text long-field2 repo$repoNumber"	value="$gitRepositoryConfiguration.getDefaultBranch()" placeholder="master" /><br />
            Authentication Method: 
            <select name="authMethod" class="select medium-field repo$repoNumber">
                <option #if ($gitRepositoryConfiguration.getAuthMethod() == "NONE") selected="selected" #end value="NONE">None</option>
                <option #if ($gitRepositoryConfiguration.getAuthMethod() == "HTTP") selected="selected" #end value="HTTP">HTTPS with credentials</option>
                <option #if ($gitRepositoryConfiguration.getAuthMethod() == "GITHUB") selected="selected" #end value="GITHUB">GitHub OAuth Token</option>
                <option #if ($gitRepositoryConfiguration.getAuthMethod() == "GITLAB") selected="selected" #end value="GITLAB">GitLab Personal Access Token</option>
            </select>
            <div id="username$repoNumber" style="display: #if ($gitRepositoryConfiguration.getAuthMethod() == 'NONE' || $gitRepositoryConfiguration.getAuthMethod() == 'GITHUB') none #else block #end ;">User Name:
            <input type="text" class="text long-field3 repo$repoNumber" value="$gitRepositoryConfiguration.getUsername"/></div>
            <div id="token$repoNumber" style="display: #if ($gitRepositoryConfiguration.getAuthMethod() == 'NONE') none #else block #end ;">Password or Token:
            <input type="password" class="text long-field4 repo$repoNumber" value="$gitRepositoryConfiguration.getToken()"/></div>
        </div>
        <script>
            var authMethod${repoNumber} = document.getElementsByClassName("select medium-field repo$repoNumber");
            var username${repoNumber} = document.getElementById("username$repoNumber");
            var token${repoNumber} = document.getElementById("token$repoNumber");

            authMethod${repoNumber}[0].addEventListener("change", function () {
                switch (authMethod${repoNumber}[0].options[authMethod${repoNumber}[0].selectedIndex].value) {
                    case "HTTP":
                        username${repoNumber}.style.display = "block";
                        token${repoNumber}.style.display = "block";
                        break;
                    case "GITHUB":
                        username${repoNumber}.style.display = "none";
                        token${repoNumber}.style.display = "block";
                        break;
                    case "GITLAB":
                        username${repoNumber}.style.display = "block";
                        token${repoNumber}.style.display = "block";
                        break;
                    default:
                        username${repoNumber}.style.display = "none";
                        token${repoNumber}.style.display = "none";
                        break;
                }
            });

            var deleteEntry${repoNumber} = document.getElementById("delete-entry$repoNumber");
            deleteEntry${repoNumber}.addEventListener("click", function () {
                if (confirm("Are you sure you want to delete this entry?")) {
                    var div = document.getElementById("repodiv$repoNumber");
                    div.parentNode.removeChild(div);
                }
            });
        </script>
        #set( $repoNumber = $repoNumber + 1 )
        #end
	</div>
    <div class="aui-group">
		<button class="aui-button" id="add-repo-button">
    		<span class="aui-icon aui-icon-small aui-iconfont-add">Enables to add a new git repository</span> 
    		Add New Repository
    	</button>
		<input type="button" id="git-uris-button" class="aui-button aui-button-primary" value="Save Addresses"/>
	</div>
	<div class="description">
		URI: Uniform resource identifier of the git repository that will be cloned (Example:
			https://github.com/cures-hub/cures-condec-jira.git). <br/>
		Default Branch: Name of default branch for the Repository (Example: develop). <br/>
        Authentication Method: Method of Authentication for accessing non-public repositories.<br />
        User Name: The git service user name for authentication.<br />
        Password or Token: The git service password or token for authentication.<br />
		The git repository/repositories are cloned to JiraHome/data/condec-plugin/git/<em>project-key</em>.
	</div>
</div>

<div class="field-group">
    <label for="isPostFeatureBranchCommitsActivated-toggle">Post Feature Branch Commit Messages as
        Comment?</label>
    <aui-toggle id="isPostFeatureBranchCommitsActivated-toggle"
                value="$projectKey" label="Post feature branch commits?"></aui-toggle>
    <div class="description">Enables or disables whether every feature branch commit message is posted
        as a comment under the corresponding Jira issue for this project.<br/>
		<span class="aui-icon aui-icon-small aui-iconfont-warning">WARNING: </span> 
		You need to make sure that the user "GIT-COMMIT-COMMENTATOR" has a project
		role that is allowed to write comments. The user "GIT-COMMIT-COMMENTATOR" is created automatically but needs to be manually associated with the project.
    </div>
</div>

<div class="field-group">
    <label for="isPostSquashedCommitsActivated-toggle">Post Commit Messages on Default Branch as Comment?</label>
    <aui-toggle id="isPostSquashedCommitsActivated-toggle"
                value="$projectKey" label="Post squashed commits?"></aui-toggle>
    <div class="description">Enables or disables whether commit messages on the default branch are posted
        as a comment under the corresponding Jira issue for this project.<br/>
		<span class="aui-icon aui-icon-small aui-iconfont-warning">WARNING: </span> 
		You need to make sure that the user "GIT-COMMIT-COMMENTATOR" has a project
		role that is allowed to write comments. The user "GIT-COMMIT-COMMENTATOR" is created automatically but needs to be manually associated with the project.
    </div>
</div>

<div class="field-group">
<label for="delete-repos-button">Delete Git Repositories?</label>
<input type="button" class="aui-button" id="delete-repos-button" value="Delete Git Repositories"/>
<div class="description">Removes all git repositories for this project from file system. 
	Deletes all linked code classes from the knowledge graph.<br/>
	<span class="aui-icon aui-icon-small aui-iconfont-warning">WARNING: </span> 
	Please note that you need to disable git extraction for a permanent removal of the repositories.
	Otherwise they will be cloned again.
</div>
</div>

<script>
	var max_fields = 10;
	var wrapper = AJS.$("#repo-wrapper");
	var add_button = AJS.$("#add-repo-button");

	var x = $repoNumber;
	$(add_button).click(function (e) {
		e.preventDefault();
		if (x < max_fields) {
			$(wrapper).append('<div class="aui-group" id="repodiv' + String(x) + '">' +
                'URI: ' +
                '<input type="text" class="text long-field repo' + String(x) + '" placeholder="https://github.com/cures-hub/cures-condec-jira.git"/>&nbsp;' +
                '<input type="button" id="delete-entry' + String(x) + '" class="aui-button aui-button-primary" value="Delete entry"/>' +
                '<br />' + 
                'Default Branch: ' + 
                '<input type="text" class="text long-field2 repo' + String(x) + '" placeholder="master" /><br />' +
                'Authentication Method: ' +
                '<select name="authMethod" class="select medium-field repo' + String(x) + '">' +
                    '<option selected="selected" value="NONE">None</option>' +
                    '<option value="HTTP">HTTPS with credentials</option>' +
                    '<option value="GITHUB">GitHub OAuth Token</option>' +
                    '<option value="GITLAB">GitLab Personal Access Token</option>' +
                '</select>' +
                '<div id="username' + String(x) + '" style="display:none">User Name: ' +
                '<input type="text" class="text long-field3 repo' + String(x) + '" /></div>' +
                '<div id="token' + String(x) + '" style="display:none">Password or Token: ' +
                '<input type="password" class="text long-field4 repo' + String(x) + '" /></div>' +
            '</div>' +
            '<script>\n' + 
                'var authMethod' + String(x) + ' = document.getElementsByClassName("select medium-field repo' + String(x) + '");\n' + 
                'var username' + String(x) + ' = document.getElementById("username' + String(x) + '");\n' + 
                'var token' + String(x) + ' = document.getElementById("token' + String(x) + '");\n' + 
                '\n' + 
                'authMethod' + String(x) + '[0].addEventListener("change", function () {\n' + 
                    'switch (authMethod' + String(x) + '[0].options[authMethod' + String(x) + '[0].selectedIndex].value) {\n' + 
                        'case "HTTP":\n' +
                            'username' + String(x) + '.style.display = "block";\n' + 
                            'token' + String(x) + '.style.display = "block";\n' + 
                            'break;\n' + 
                        'case "GITHUB":\n' +
                            'username' + String(x) + '.style.display = "none";\n' + 
                            'token' + String(x) + '.style.display = "block";\n' + 
                            'break;\n' + 
                        'case "GITLAB":\n' +
                            'username' + String(x) + '.style.display = "block";\n' + 
                            'token' + String(x) + '.style.display = "block";\n' + 
                            'break;\n' + 
                        'default:\n' +
                            'username' + String(x) + '.style.display = "none";\n' + 
                            'token' + String(x) + '.style.display = "none";\n' + 
                            'break;\n' + 
                    '}\n' +
                '});\n' + 
                'var deleteEntry' + String(x) + ' = document.getElementById("delete-entry' + String(x) + '");' +
                'deleteEntry' + String(x) + '.addEventListener("click", function () {' +
                    'if (confirm("Are you sure you want to delete this entry?")) {' +
                        'var div = document.getElementById("repodiv' + String(x) + '");' +
                        'div.parentNode.removeChild(div);' +
                    '}' +
                '});' +
            '<\/script>\n');
			x++;
		} else {
			alert('You reached the maximal number of repositories.')
		}
	});

	$(wrapper).on("click", ".delete-repo-button", function (e) {
		e.preventDefault();
		$(this).parent('div').remove();
		x--;
	});

    var gitsSubmitButton = document.getElementById("git-uris-button");

    gitsSubmitButton.addEventListener("click", function () {
        var gitUris = document.getElementsByClassName("text long-field");
        var defaultBranches = document.getElementsByClassName("text long-field2");
        var authMethods = document.getElementsByClassName("select medium-field");
        var usernames = document.getElementsByClassName("text long-field3");
        var tokens = document.getElementsByClassName("text long-field4");
		var gitRepositoryConfigurations = [];
        var uriString = "";
        var defaultBranchesString = "";
        var authMethodsString = "";
        var usernamesString = "";
        var tokensString = "";
        for (i = 0; i < gitUris.length; i++) {
			var gitRepositoryConfiguration = {
				"repoUri": gitUris[i].value,
				"defaultBranch": defaultBranches[i].value,
				"authMethod": authMethods[i].value,
				"username": usernames[i].value,
				"token": tokens[i].value;
			};
			gitRepositoryConfigurations.push(gitRepositoryConfiguration);
        }
       
        console.log(gitRepositoryConfigurations);
        conDecAPI.setGitRepositoryConfigurations("$projectKey", gitRepositoryConfigurations);
        
		var gitToggle = document.getElementById("isKnowledgeExtractedFromGit-toggle");
		if (gitToggle.checked) {
            conDecAPI.setKnowledgeExtractedFromGit(gitToggle.checked, gitToggle.value);
        }
        window.onbeforeunload = null;
    });

    var gitToggle = document.getElementById("isKnowledgeExtractedFromGit-toggle");
    var isPostSquashedCommitsActivatedToggle = document.getElementById('isPostSquashedCommitsActivated-toggle');
    var isPostFeatureBranchCommitsActivatedToggle = document.getElementById('isPostFeatureBranchCommitsActivated-toggle');

    if ($project.isKnowledgeExtractedFromGit()) {
        gitToggle.checked = true;
    } else {
        gitToggle.checked = false;
        isPostSquashedCommitsActivatedToggle.disabled = true;
        isPostFeatureBranchCommitsActivatedToggle.disabled = true;
    }

    if ($project.isPostSquashedCommitsActivated()) {
        isPostSquashedCommitsActivatedToggle.checked = true;
    } else {
        isPostSquashedCommitsActivatedToggle.checked = false;
    }

    if ($project.isPostFeatureBranchCommitsActivated()) {
        isPostFeatureBranchCommitsActivatedToggle.checked = true;
    } else {
        isPostFeatureBranchCommitsActivatedToggle.checked = false;
    }

    isPostSquashedCommitsActivatedToggle.addEventListener('change', function (event) {
        this.busy = true;
        conDecAPI.setPostSquashedCommits(this.checked, this.value);
        this.busy = false;
    });

    isPostFeatureBranchCommitsActivatedToggle.addEventListener('change', function (event) {
        this.busy = true;
        conDecAPI.setPostFeatureBranchCommits(this.checked, this.value);
        this.busy = false;
    });

    gitToggle.addEventListener("change", function (error) {
        this.busy = true;
        conDecAPI.setKnowledgeExtractedFromGit(this.checked, this.value);
        isPostSquashedCommitsActivatedToggle.disabled = !this.checked;
        isPostFeatureBranchCommitsActivatedToggle.disabled = !this.checked;
        if (!this.checked) {
            isPostSquashedCommitsActivatedToggle.checked = false;
            isPostFeatureBranchCommitsActivatedToggle.checked = false;
        }
        this.busy = false;
    });
    
    const deleteRepositoriesButton = document.getElementById("delete-repos-button");
    deleteRepositoriesButton.addEventListener("click", function () {
        if (confirm("Are you sure you want to delete the git repositories in file system? This cannot be reverted (only by cloning them again).")) {
            conDecAPI.deleteGitRepos("$projectKey");
        }
    });
</script>
<html>
<head>
<title>ConDec Project Settings</title>
<meta name="decorator" content="atl.admin" />
<meta name="admin.active.section" content="atl.jira.proj.config" />
<meta name="admin.active.tab"
	content="decdoc-project-settings-menu-item" />
<meta name="projectKey" content="$projectKey" />
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:decision-knowledge-management-resources")
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:stylesheet-and-icon-resources")
</head>
<body>
<form class="aui">
<h1>Continuous Management of Decision Knowledge (ConDec)</h1>
<h2>Basic Project Settings</h2>
	<div class="field-group">
		<label for="isActivated-toggle">ConDec Activated?</label>
		<aui-toggle id="isActivated-toggle" value="$projectKey"	label="ConDec Activated?"></aui-toggle>
		<div class="description">Enables or disables the plug-in for this project.</div>
	</div>
	<div class="field-group">
		<label for="isIssueStrategy-toggle">Store in Issues?</label>
		<aui-toggle id="isIssueStrategy-toggle" value="$projectKey"	label="Store in Issues?"></aui-toggle>
		<div class="description">Sets the persistence strategy for this
			project (either issue strategy or active object strategy). If
			enabled, decision knowledge is stored in JIRA issues. If you choose
			the issue strategy, you need to associate the project with the
			decision knowledge issue type scheme.
		</div>
	</div>

<h2 id="additionale-types-header">Additional Decision Knowledge	Types</h2>
	<script>
	html = "<p id='additionale-types-text'> The default decision knowledge types are:";
	var defaultKnowledgeTypes = [ "Decision", "Issue", "Alternative", "Argument" ]
	for (i in defaultKnowledgeTypes) {
		html += " <span class='aui-lozenge'>" + defaultKnowledgeTypes[i];
		html += "&nbsp;<img src='$imageFolderUrl" + defaultKnowledgeTypes[i] + ".png'></span>";
	}
	html += ". If you enable additional decision knowledge types, you need to add them to the ";
	html += "current issue type scheme (when using the issue strategy).<br/><br/></p>";
	document.getElementById("additionale-types-header").insertAdjacentHTML('afterend', html);
	
	var additionalKnowledgeTypes = [ "Assessment", "Assumption", "Claim", "Constraint", "Context",
		"Implication", "Goal", "Solution", "Problem", "Issue" ];
	var typeToggles = [];
	for (i in additionalKnowledgeTypes) {
		var toggleName = additionalKnowledgeTypes[i] + "-toggle";
		html =  "<div class='field-group'>";
		html += "<label for=" + toggleName + ">" + additionalKnowledgeTypes[i];
		html += "&nbsp;&nbsp;<img src='$imageFolderUrl" + additionalKnowledgeTypes[i] + ".png'></label>";
		html += "<aui-toggle id='" + toggleName + "' value='" + additionalKnowledgeTypes[i] + "' label='" + additionalKnowledgeTypes[i] + "'></aui-toggle>";
		html += "<div class='description'>Enables the " + additionalKnowledgeTypes[i] + " element for this project.</div>";
		html += "</div>";
		document.getElementById("additionale-types-text").insertAdjacentHTML('afterend', html);
		typeToggles.push(document.getElementById(toggleName));
	}
	</script>

<h2>Decision Knowledge Extraction from JIRA Issue Description and Comments</h2>
	<div class="field-group">
		<label for="isKnowledgeExtractedFromIssues-toggle">Extract from JIRA Issue Text?</label>
		<aui-toggle id="isKnowledgeExtractedFromIssues-toggle"
			value="$projectKey" label="Extract from	Issue Comments?"></aui-toggle>
		<div class="description">Enables or disables whether decision
			knowledge is extracted from JIRA issue description and comments for this project.
		</div>
	</div>
	<div class="field-group">
		<label for="isClassifierUsed-toggle">Use Classifier to identify Decision Knowledge?</label>
		<aui-toggle id="isClassifierUsed-toggle"
			value="$projectKey" label="Use Classifier to Identify Decision Knowledge?"></aui-toggle>
		<div class="description">Enables or disables whether text is automatically classified 
		as decision knowledge within JIRA issue description and comments for this project.
		</div>
	</div>
	<div class="field-group">
		<label for="iconParsing-toggle">Use Icons as Tags?</label>
		<aui-toggle id="iconParsing-toggle" value="$projectKey"
			label="Use icon labels"></aui-toggle>
		<div class="description">Enables or disables to use icons for tagging decision knowledge. 
			<br/> WARNING: Use with caution. Sentences will not be labelled/classified 
			correctly if a decision knowledge icon is used for other things 
			than as a decision knowledge tag.
		</div>
	</div>		
	<div class="field-group">
		<label for="validateSentenceDatabase">Validate Manual Tags and Links?</label>
		<input type="button" class="aui-button" id="validateSentenceDatabase" 
			value="Validate Sentence Database" />
		<div class="description">Validates all metadata (manual provided tags) 
			of sentences in issue comments including all links from and to sentences.
		</div>		
	</div>
	<div class="field-group">
		<label for="classifyAllIssuesInProject">Suggest Tags for Whole Project?</label>
		<input type="button" class="aui-button" id="classifyAllIssuesInProject" value="Classify all Comments" />
		<div class="description">Classifies decision knowledge for all issue comments for this project.</div>
		<div id="progress-bar" class="aui-progress-indicator">
		    <span class="aui-progress-indicator-value"></span>
		</div>		
		<script>
			AJS.progressBars.update("#progress-bar", 0.0);
			var classifyAllIssuesInProjectButton = document.getElementById("classifyAllIssuesInProject");
			classifyAllIssuesInProjectButton.addEventListener("click", function() {
				if (confirm('Are you sure you want to classify all issue comments? This might take some time if the project is big.')) {
					AJS.progressBars.setIndeterminate("#progress-bar");
	        		var isSucceeded = conDecAPI.classifyWholeProject('$projectKey'); 
	        		AJS.progressBars.update("#progress-bar", isSucceeded);               		
	        	}
	    	});
		</script>	
	</div>
	<div class="field-group">
    	<label for="saveArffFile-button">Create an ARFF File</label>
    	<input type="button" class="aui-button" id="saveArffFile-button" value="Create ARFF File"/>
    	<div class="description">Creates an Attribute-Relation File Format (ARFF) file for the current project that can be used to train the classifier.
    		This file is saved in the JIRA home directory in data/condec-plugin/project-key. You can download it from there.
    		If you want to train the classifier with this file you need to reload this page to access the file.</div>
    </div>
    <div class="field-group">
        <label for="trainClassifier-button">Train the Classifier</label>
        <aui-select id="select-arff-file-train"
                    name="arff-file"
                    placeholder="Select an ARFF File">
            #foreach ($arffFile in $arffFiles)
            	#if ($arffFile.toString().contains($selectedArffFile))       		
            		<aui-option selected>$arffFile</aui-option>
            	#else
            		<aui-option>$arffFile</aui-option>
            	#end
            #end
        </aui-select>
        <input type="button" class="aui-button" id="trainClassifier-button" value="Train Classifier"/>
        <div class="description">Trains the classifier on the selected Attribute-Relation File Format (ARFF) file.</div>
    </div>    

<h2>Decision Knowledge Extraction from Git</h2>
	<div class="field-group">
		<label for="isKnowledgeExtractedFromGit-toggle">Extract from
			Git?</label>
		<aui-toggle id="isKnowledgeExtractedFromGit-toggle"
			value="$projectKey" label="Extract from	Git?"></aui-toggle>
		<div class="description">Enables or disables whether decision
			knowledge is extracted from git for this project. 
		</div>
	</div>
    <div class="field-group">
    	<label for="git-uri-input-field">Git Repository</label> 
    	<input id="git-uri-input-field" type="text" class="text long-field"
        		value="$project.getGitUri()" placeholder="https://github.com/cures-hub/cures-condec-jira.git" /> 
    	<input type="button"
    		id="git-uri-button" class="aui-button aui-button-primary" value="Save Address" />
        <div class="description">Uniform resource identifier of the git repository that will be cloned.
        </div>
    </div>

<h2>Webhook</h2>
	<div class="field-group">
	    <label for="isWebhookEnabled-toggle">Webhook Activated?</label>
	    <aui-toggle id="isWebhookEnabled-toggle"
	                value="$projectKey" label="Webhook Activated?"></aui-toggle>
	    <div class="description">Activates or deactivates the webhook for this project. If the webhook 
	    	is activated, it is triggered whenever a decision knowledge element or a link between 
	    	elements is changed. Then, a key value JSON string is sent to the URL. 
	    	The key is the key of the root element and the value is the Treant JSON string.
	    </div>
	</div>
    <div class="field-group">
        <label for="select-root-types">Root Element Types:</label>
        <select class="multi-select" size="8" multiple="multiple" id="select-root-types" name="select-root-types">
            #foreach ($issueType in $issueTypes)
                <option name="$issueType"
                #if ( $rootTypes.contains($issueType) )
                    selected
                        #end
                >
                    $issueType</option>
            #end
        </select>
        <div class="description">Selects the issue type of the root element (key) of the webhook data.</div>
        <input type="button" value="Set Root Element Types" onclick="getMultipleSelectedValue()" class="aui-button aui-button-primary"/>
    </div>
	<div class="field-group">
		<label for="webhook-url">URL</label> <input type="text"
			class="text long-field" id="webhook-url" value="$project.getWebhookUrl()" />
		<div class="description">URL that decision knowledge is posted
			to when updated.</div>
	</div>
	<div class="field-group">
		<label for="webhook-secret">Shared Secret</label> <input type="text"
			class="text long-field" id="webhook-secret" value="$project.getWebhookSecret()" />
		<div class="description">Key to authenticate with remote server.</div>				
		<input type="button" id="submitWebhook" class="aui-button aui-button-primary" value="Set Webhook URL and Secret" />
	</div>				

<script>
	var activationToggle = document.getElementById('isActivated-toggle');
	if ($project.isActivated() == true) {
		activationToggle.checked = true;
	} else {
		activationToggle.checked = false;
	};
	
	var strategyToggle = document.getElementById('isIssueStrategy-toggle');
	if ($project.isIssueStrategy() == true) {
		strategyToggle.checked = true;
	} else {
		strategyToggle.checked = false;
	};
	
	var issueCommentsToggle = document.getElementById('isKnowledgeExtractedFromIssues-toggle');
	if ($project.isKnowledgeExtractedFromIssues() == true) {
		issueCommentsToggle.checked = true;
	} else {
		issueCommentsToggle.checked = false;
	};
	
	var isClassifierUsedToggle = document.getElementById('isClassifierUsed-toggle');
	if ($project.isClassifierUsedForIssueComments() == true) {
		isClassifierUsedToggle.checked = true;
	} else {
		isClassifierUsedToggle.checked = false;
	};
	
	var clearSentenceDatabaseButton = document.getElementById("validateSentenceDatabase");
	clearSentenceDatabaseButton.addEventListener("click", function() {
		conDecAPI.clearSentenceDatabase('$projectKey');
	});
	
	var sentenceIconToggle = document.getElementById('iconParsing-toggle');
	if ($project.isIconParsingEnabled() == true) {
		sentenceIconToggle.checked = true;
	} else {
		sentenceIconToggle.checked = false;
	};
	
	var saveArffFileButton = document.getElementById("saveArffFile-button");
    saveArffFileButton.addEventListener("click", function () {
    	conDecAPI.saveArffFile('$projectKey', function(fileString) {
    		var link = document.createElement('a');
            var fileName = "ClassifierTrainingData.arff";
            link.style.display = 'none';
            link.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(fileString));
            link.setAttribute('download', fileName);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);    		
    	});        
    });
    
    var trainClassifier = document.getElementById("trainClassifier-button");
    trainClassifier.addEventListener("click", function() {
        if (confirm('Are you sure you want to retrain the classifier?')) {
            var trainDataSelect = document.getElementById("select-arff-file-train");
            var isNewTrained = conDecAPI.trainClassifier('$projectKey', trainDataSelect.value);
            console.log(trainDataSelect.value);
        }
    });
				
	var gitToggle = document.getElementById('isKnowledgeExtractedFromGit-toggle');
	if ($project.isKnowledgeExtractedFromGit() == true) {
		gitToggle.checked = true;
	} else {
		gitToggle.checked = false;
	};
	
	var gitSubmitButton = document.getElementById('git-uri-button');
	gitSubmitButton.addEventListener("click", function() {
		var gitUri = document.getElementById('git-uri-input-field').value;
		conDecAPI.setGitUri('$projectKey', gitUri);
		window.onbeforeunload = null;
	});
	
	var webhookToggle = document.getElementById('isWebhookEnabled-toggle');
	if ($project.isWebhookEnabled() == true) {
		webhookToggle.checked = true;
	} else {
		webhookToggle.checked = false;
	};
	
	var webHookSubmit = document.getElementById('submitWebhook');
	webHookSubmit.addEventListener("click", function() {
		var urlInput = document.getElementById("webhook-url");
		var secretInput = document.getElementById("webhook-secret");
		conDecAPI.setWebhookData('$projectKey', urlInput.value, secretInput.value);
		window.onbeforeunload = null;
	});
	
	activationToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setActivated(this.checked, this.value);
		this.busy = false;
	});
	
	strategyToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setIssueStrategy(this.checked, this.value);
		this.busy = false;
	});
	
	for (j in additionalKnowledgeTypes) {
		conDecAPI.isKnowledgeTypeEnabled(typeToggles[j].value, '$projectKey', typeToggles[j], function(isTypeEnabled, toggle) {				
	    	toggle.checked = isTypeEnabled;
		});
	    typeToggles[j].addEventListener('change', function (error) {
	        this.busy = true;
	        conDecAPI.setKnowledgeTypeEnabled(this.checked, this.value, '$projectKey');
	        this.busy = false;
	    });           
	}
	
	issueCommentsToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setKnowledgeExtractedFromIssues(this.checked, this.value);
		this.busy = false;
	});
	
	isClassifierUsedToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setUseClassifierForIssueComments(this.checked, this.value);
		this.busy = false;
	});
	
	sentenceIconToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setIconParsing(this.value, this.checked);
		this.busy = false;
	});
	
	gitToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setKnowledgeExtractedFromGit(this.checked, this.value);
		this.busy = false;
	});

	webhookToggle.addEventListener('change', function(error) {
		this.busy = true;
		conDecAPI.setWebhookEnabled(this.checked, this.value);
		this.busy = false;
	});

    function getMultipleSelectedValue()
    {
        var x = document.getElementById("select-root-types");
        for (var i = 0; i < x.options.length; i++) {
            if(x.options[i].selected == true){
                conDecAPI.setWebhookType(x.options[i].value, '$projectKey', "true");
            }
            else {
                conDecAPI.setWebhookType(x.options[i].value, '$projectKey', "false");
            }
        }
    }

</script>
</form>
</body>
</html>
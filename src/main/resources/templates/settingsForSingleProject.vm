<html>
<head>
<title>ConDec Project Settings</title>
<meta name="decorator" content="atl.admin" />
<meta name="admin.active.section" content="atl.jira.proj.config" />
<meta name="admin.active.tab"
	content="decdoc-project-settings-menu-item" />
<meta name="projectKey" content="$projectKey" />
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:rest-client-resources")
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:stylesheet-and-icon-resources")
</head>
<body>
	<form class="aui">
		<h1>Continuous Management of Decision Knowledge (ConDec)</h1>
		<h2>Basic Project Settings</h2>
		<div class="field-group">
			<label for="isActivated-toggle">ConDec Activated?</label>
			<aui-toggle id="isActivated-toggle" value="$projectKey"
				label="ConDec Activated?"></aui-toggle>
			<script>
                var activationToggle = document.getElementById('isActivated-toggle');
                    #if ($project.isActivated() == true)
						activationToggle.checked = true;
                    #else
						activationToggle.checked = false;
                    #end
                activationToggle.addEventListener('change', function(error) {
                    this.busy = true;
                    setActivated(this.checked, this.value);
                    this.busy = false;
                });
            </script>
			<div class="description">Enables or disables the plug-in for
				this project.</div>
		</div>
		<div class="field-group">
			<label for="isIssueStrategy-toggle">Store in Issues?</label>
			<aui-toggle id="isIssueStrategy-toggle" value="$projectKey"
				label="Store in Issues?"></aui-toggle>
			<script>
                var strategyToggle = document.getElementById('isIssueStrategy-toggle');
                    #if ($project.isIssueStrategy() == true)
						strategyToggle.checked = true;
                    #else
						strategyToggle.checked = false;
                    #end
                strategyToggle.addEventListener('change', function(error) {
                    this.busy = true;
                    setIssueStrategy(this.checked, this.value);
                    this.busy = false;
                });
            </script>
			<div class="description">Sets the persistence strategy for this
				project (either issue strategy or active object strategy). If
				enabled, decision knowledge is stored in JIRA issues. If you choose
				the issue strategy, you need to associate the project with the
				decision knowledge issue type scheme.</div>
		</div>
		<div class="field-group">
			<label for="isKnowledgeExtractedFromGit-toggle">Extract from
				Git?</label>
			<aui-toggle id="isKnowledgeExtractedFromGit-toggle"
				value="$projectKey" label="Extract from	Git?"></aui-toggle>
			<script>
				var gitToggle = document.getElementById('isKnowledgeExtractedFromGit-toggle');
					if ($project.isKnowledgeExtractedFromGit() == true) {
						gitToggle.checked = true;
					} else {
						gitToggle.checked = false;
					};
				gitToggle.addEventListener('change', function(error) {
					this.busy = true;
					setKnowledgeExtractedFromGit(this.checked, this.value);
					this.busy = false;
				});
            </script>
			<div class="description">Enables or disables whether decision
				knowledge is extracted from Git for this project.</div>
		</div>
		<div class="field-group">
			<label for="git-address-input-field">Git Repository</label> 
			<input
				id="git-address-input-field" type="text" class="text long-field"
				value="$project.getGitAddress()" placeholder="https://github.com/cures-hub/cures-condec-jira.git"> 
			<input type="button"
				id="git-address-button" class="aui-button aui-button-primary"
				value="Set Address" />
			<script>
				var gitSubmitButton = document.getElementById('git-address-button');
				gitSubmitButton.addEventListener("click", function() {
				    var gitAddress = document.getElementById('git-address-input-field').value;
                    setGitAddress('$projectKey', gitAddress);
                    window.onbeforeunload = null;
				});
			</script>
			<div class="description">Address of the git repository where
				decision knowledge is extracted from.</div>
		</div>
	</form>
	<form class="aui">
		<div class="field-group">
			<label for="isKnowledgeExtractedFromIssues-toggle">Extract
				from Issue Comments?</label>
			<aui-toggle id="isKnowledgeExtractedFromIssues-toggle"
				value="$projectKey" label="Extract from	Issue Comments?"></aui-toggle>
			<script>
				var issueToggle = document.getElementById('isKnowledgeExtractedFromIssues-toggle');
					if ($project.isKnowledgeExtractedFromIssues() == true) {
						issueToggle.checked = true;
					} else {
						issueToggle.checked = false;
					};
				issueToggle.addEventListener('change', function(error) {
					this.busy = true;
					setKnowledgeExtractedFromIssues(this.checked, this.value);
					this.busy = false;
				});
            </script>
			<div class="description">Enables or disables whether decision
				knowledge is extracted from issue comments for this project.</div>
		</div>
		<h2 id="additionale-types-header">Additional Decision Knowledge
			Types</h2>
		<script>
		html = "<p id='additionale-types-text'> The default decision knowledge types are:";
		for (i in defaultKnowledgeTypes) {
			html += " <span class='aui-lozenge'>" + defaultKnowledgeTypes[i];
			html += "&nbsp;<img src='$imageFolderUrl" + defaultKnowledgeTypes[i] + ".png'></span>";
		}
		html += ". If you enable additional decision knowledge types, you need to add them to the ";
		html += "current issue type scheme (when using the issue strategy).<br/><br/></p>";
		document.getElementById("additionale-types-header").insertAdjacentHTML('afterend', html);

		var additionalKnowledgeTypes = [ "Assessment", "Assumption", "Claim", "Constraint", "Context",
		"Implication", "Goal", "Solution", "Problem", "Issue" ];
		var typeToggles = [];
		for (i in additionalKnowledgeTypes) {
			var toggleName = additionalKnowledgeTypes[i] + "-toggle";
			html =  "<div class='field-group'>";
			html += "<label for=" + toggleName + ">" + additionalKnowledgeTypes[i];
			html += "&nbsp;&nbsp;<img src='$imageFolderUrl" + additionalKnowledgeTypes[i] + ".png'></label>";
			html += "<aui-toggle id='" + toggleName + "' value='" + additionalKnowledgeTypes[i] + "' label='" + additionalKnowledgeTypes[i] + "'></aui-toggle>";
			html += "<div class='description'>Enables the " + additionalKnowledgeTypes[i] + " element for this project.</div>";
			html += "</div>";
			document.getElementById("additionale-types-text").insertAdjacentHTML('afterend', html);
			typeToggles.push(document.getElementById(toggleName));
		}
		</script>
		<script>
		for (j in additionalKnowledgeTypes) {
			isKnowledgeTypeEnabled(typeToggles[j].value, '$projectKey', typeToggles[j], function(isTypeEnabled, toggle) {
			if (isTypeEnabled == true) {
                    toggle.checked = true;
                } else {
                    toggle.checked = false;
                }});
            typeToggles[j].addEventListener('change', function(error) {
                this.busy = true;
                setKnowledgeTypeEnabled(this.checked, this.value, '$projectKey');
                this.busy = false;
            });
		}
		</script>
		<h2>Webhook</h2>
		<div class="field-group">
            <label for="isWebhookEnabled-toggle">Webhook Activated?</label>
            <aui-toggle id="isWebhookEnabled-toggle"
                        value="$projectKey" label="Webhook Activated?"></aui-toggle>
            <div id="webhookDescripiton" class="description">Activates or deactivates the webhook for this project. If the webhook is activated,
            		it is triggered whenever a decision knowledge element or a link between elements is changed. 
            		Then, a key value JSON string is sent to the URL. 
            		The key is the key of the root element and the value is the Treant JSON string.</div>
            <div class="description">You can select what Type of Issue should be send a Root Element if the webhook is activated.</div>
			<label for="webhook-url">URL</label> <input type="text"
				class="text long-field" id="webhook-url" value="$project.getWebhookUrl()" />
			<div class="description">URL that decision knowledge is posted
				to when updated.</div>
			<label for="webhook-secret">Shared Secret</label> <input type="text"
				class="text long-field" id="webhook-secret" value="$project.getWebhookSecret()" />
			<div class="description">Key to authenticate with remote
				server.</div>				
			<input type="button" id="submitWebhook" class="aui-button aui-button-primary" value="Set Webhook URL and Secret" />
		</div>
		<script>
			var webhookToggle = document.getElementById('isWebhookEnabled-toggle');
            if ($project.isWebhookEnabled() == true) {
                webhookToggle.checked = true;
            } else {
                webhookToggle.checked = false;
            };
            webhookToggle.addEventListener('change', function(error) {
                this.busy = true;
                setWebhookEnabled(this.checked, this.value);
                this.busy = false;
            });

            getProjectIssueTypes("$projectKey", function (issueTypes) {
                html = "<button class=\"aui-button aui-dropdown2-trigger\" aria-controls=\"webhook-rootType\">Webhook Type</button>" +
                        "<aui-dropdown-menu id=\"webhook-rootType\">" +
                        "<aui-section id=\"webhookType\" label=\"Webhook Root Type\">";
                for(i in issueTypes){
                    if(issueTypes[i].localeCompare("$project.getWebhookRootType()") == 0){
                        console.log("checked");
                        html += "<aui-item-radio interactive checked>"+ issueTypes[i] +"</aui-item-radio>";
                    } else {
                        console.log("unchecked");
                        html += "<aui-item-radio interactive>"+ issueTypes[i] +"</aui-item-radio>";
                    }
                }
                html += "</aui-section>" +
                        "</aui-dropdown-menu>";
                document.getElementById("webhookDescripiton").insertAdjacentHTML('afterend', html);
            });

            var webhookDrop = document.getElementById('webhookType');
            webhookDrop.addEventListener('click', function (e) {
                var selectedType = e.target.innerText;
                setWebhookType(selectedType, '$projectKey');
            });

			var webHookSubmit = document.getElementById('isWebhookEnabled-toggle')
			webHookSubmit.addEventListener("click", function() {
				var urlInput = document.getElementById("webhook-url");
				var secretInput = document.getElementById("webhook-secret");
                setWebhookData('$projectKey', urlInput.value, secretInput.value);
                window.onbeforeunload = null;
            });
		</script>
		<h2>Decision Extraction from Issue Comments - Settings</h2>
		<div class="field-group">
			<input type="button" class="aui-button" id="clearSentenceDatabase" value="Clear Sentence Database" />
			<div class="description">Deleta all metadata to sentences in comments, includes all links from and to sentences</div>		
			<script>
			var clearSentenceDatabaseButton = document.getElementById("clearSentenceDatabase");
			clearSentenceDatabaseButton.addEventListener("click", function() {
                clearSentenceDatabase('$projectKey');
                window.onbeforeunload = null;
            });
		</script>	
		</div>
		<div class="field-group">
			<input type="button" class="aui-button" id="classifyAllIssuesInProject" value="Classify all Comments" />
			<div class="description">Classify Decision Knowledge for all Comments in Issues for this project</div>		
			<!-- <div id="some-id" class="aui-progress-indicator">
			    <span class="aui-progress-indicator-value"></span>
			</div> -->
			<script>
			var clearSentenceDatabaseButton = document.getElementById("classifyAllIssuesInProject");
			clearSentenceDatabaseButton.addEventListener("click", function() {
				// AJS.progressBars.setIndeterminate("#some-id");
                classifyWholeProject('$projectKey');
                window.onbeforeunload = null;
            });
		</script>	
		</div>
		<div class="field-group">
			<label for="iconParsing-toggle">Use icon labels</label>
			<aui-toggle id="iconParsing-toggle" value="$projectKey"
				label="Use icon labels"></aui-toggle>
			<script>
                var activationToggle = document.getElementById('iconParsing-toggle');
                #if ($project.isIconParsing() == true)
						activationToggle.checked = true;
                    #else
						activationToggle.checked = false;
                    #end
                    console.log(activationToggle.checked );
                activationToggle.addEventListener('change', function(error) {
                    this.busy = true;
                    setIconParsing(this.value, this.checked);
                    this.busy = false;
                });
            </script>
			<div class="description">Enables or disables the parsing for icons to tag decision knowledge <br> WARNING: Use with caution. Sentences will not be labeled / classified correctly if a decision knowledge icon is used for other things then decision knowledge labels. </div>
		</div>
	</form>
</body>
</html>
<html>
<head>
<title>ConDec Project Settings</title>
<meta name="decorator" content="atl.admin" />
<meta name="admin.active.section" content="atl.jira.proj.config" />
<meta name="admin.active.tab"
	content="decdoc-project-settings-menu-item" />
<meta name="projectKey" content="$projectKey" />
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:rest-client-resources")
$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.jira:stylesheet-and-icon-resources")
</head>
<body>
	<form class="aui">
		<h1>Continuous Management of Decision Knowledge (ConDec)</h1>
		<h2>Basic Project Settings</h2>
		<div class="field-group">
			<label for="isActivated-toggle">ConDec Activated?</label>
			<aui-toggle id="isActivated-toggle" value="$projectKey"
				label="ConDec Activated?"></aui-toggle>
			<script>
                var activationToggle = document.getElementById('isActivated-toggle');
                    #if ($project.isActivated() == true)
						activationToggle.checked = true;
                    #else
						activationToggle.checked = false;
                    #end
                activationToggle.addEventListener('change', function(error) {
                    this.busy = true;
                    setActivated(this.checked, this.value);
                    this.busy = false;
                });
            </script>
			<div class="description">Enables or disables the plug-in for
				this project.</div>
		</div>
		<div class="field-group">
			<label for="isIssueStrategy-toggle">Store in Issues?</label>
			<aui-toggle id="isIssueStrategy-toggle" value="$projectKey"
				label="Store in Issues?"></aui-toggle>
			<script>
                var strategyToggle = document.getElementById('isIssueStrategy-toggle');
                    #if ($project.isIssueStrategy() == true)
						strategyToggle.checked = true;
                    #else
						strategyToggle.checked = false;
                    #end
                strategyToggle.addEventListener('change', function(error) {
                    this.busy = true;
                    setIssueStrategy(this.checked, this.value);
                    this.busy = false;
                });
            </script>
			<div class="description">Sets the persistence strategy for this
				project (either issue strategy or active object strategy). If
				enabled, decision knowledge is stored in JIRA issues. If you choose
				the issue strategy, you need to associate the project with the
				decision knowledge issue type scheme.</div>
		</div>

		<h2 id="additionale-types-header">Additional Decision Knowledge	Types</h2>
		<script>
		html = "<p id='additionale-types-text'> The default decision knowledge types are:";
		for (i in defaultKnowledgeTypes) {
			html += " <span class='aui-lozenge'>" + defaultKnowledgeTypes[i];
			html += "&nbsp;<img src='$imageFolderUrl" + defaultKnowledgeTypes[i] + ".png'></span>";
		}
		html += ". If you enable additional decision knowledge types, you need to add them to the ";
		html += "current issue type scheme (when using the issue strategy).<br/><br/></p>";
		document.getElementById("additionale-types-header").insertAdjacentHTML('afterend', html);

		var additionalKnowledgeTypes = [ "Assessment", "Assumption", "Claim", "Constraint", "Context",
		"Implication", "Goal", "Solution", "Problem", "Issue" ];
		var typeToggles = [];
		for (i in additionalKnowledgeTypes) {
			var toggleName = additionalKnowledgeTypes[i] + "-toggle";
			html =  "<div class='field-group'>";
			html += "<label for=" + toggleName + ">" + additionalKnowledgeTypes[i];
			html += "&nbsp;&nbsp;<img src='$imageFolderUrl" + additionalKnowledgeTypes[i] + ".png'></label>";
			html += "<aui-toggle id='" + toggleName + "' value='" + additionalKnowledgeTypes[i] + "' label='" + additionalKnowledgeTypes[i] + "'></aui-toggle>";
			html += "<div class='description'>Enables the " + additionalKnowledgeTypes[i] + " element for this project.</div>";
			html += "</div>";
			document.getElementById("additionale-types-text").insertAdjacentHTML('afterend', html);
			typeToggles.push(document.getElementById(toggleName));
		}
		</script>
		<script>
		for (j in additionalKnowledgeTypes) {
			console.log(typeToggles[j].value);
			isKnowledgeTypeEnabled(typeToggles[j].value, '$projectKey', typeToggles[j], function(isTypeEnabled, toggle) {				
                toggle.checked = isTypeEnabled;
           	});
            typeToggles[j].addEventListener('change', function(error) {
                this.busy = true;
                setKnowledgeTypeEnabled(this.checked, this.value, '$projectKey');
                this.busy = false;
            });
		}
		</script>
		
		<h2>Decision Knowledge Extraction from Issue Comments</h2>
		<div class="field-group">
			<label for="isKnowledgeExtractedFromIssues-toggle">Extract
				from Issue Comments?</label>
			<aui-toggle id="isKnowledgeExtractedFromIssues-toggle"
				value="$projectKey" label="Extract from	Issue Comments?"></aui-toggle>
			<script>
				var issueToggle = document.getElementById('isKnowledgeExtractedFromIssues-toggle');
					if ($project.isKnowledgeExtractedFromIssues() == true) {
						issueToggle.checked = true;
					} else {
						issueToggle.checked = false;
					};
				issueToggle.addEventListener('change', function(error) {
					this.busy = true;
					setKnowledgeExtractedFromIssues(this.checked, this.value);
					this.busy = false;
				});
            </script>
			<div class="description">Enables or disables whether decision
				knowledge is extracted from issue comments for this project.</div>
		</div>
		<div class="field-group">
			<label for="isClassifierUsed-toggle">Use Classifier to identify Decision Knowledge?</label>
			<aui-toggle id="isClassifierUsed-toggle"
				value="$projectKey" label="Use Classifier to Identify Decision Knowledge?"></aui-toggle>
			<script>
				var isClassifierUsedToggle = document.getElementById('isClassifierUsed-toggle');
					isClassifierUsedToggle.checked = $isClassifierUsedForIssueComments
				isClassifierUsedToggle.addEventListener('change', function(error) {
					this.busy = true;
					setUseClassiferForIssueComments(this.checked, this.value);
					this.busy = false;
				});
            </script>
			<div class="description">Enables or disables whether decision
				knowledge is extracted classified from issue comments for this project.</div>
		</div>
		<div class="field-group">
			<label for="iconParsing-toggle">Use Icons as Tags?</label>
			<aui-toggle id="iconParsing-toggle" value="$projectKey"
				label="Use icon labels"></aui-toggle>
			<script>
                var sentenceIconToggle = document.getElementById('iconParsing-toggle');
                sentenceIconToggle.checked = $iconToggle
                sentenceIconToggle.addEventListener('change', function(error) {
                    this.busy = true;
                    setIconParsing(this.value, this.checked);
                    this.busy = false;
                });
            </script>
			<div class="description">Enables or disables to use icons for tagging decision knowledge. <br/> WARNING: Use with caution. Sentences will not be labelled/classified correctly if a decision knowledge icon is used for other things than as a decision knowledge tag. </div>
		</div>		
		<div class="field-group">
			<label for="validateSentenceDatabase">Validate Manual Tags and Links?</label>
			<input type="button" class="aui-button" id="validateSentenceDatabase" value="Validate Sentence Database" />
			<div class="description">Validates all metadata (manual provided tags) of sentences in issue comments including all links from and to sentences.</div>		
			<script>
				var clearSentenceDatabaseButton = document.getElementById("validateSentenceDatabase");
				clearSentenceDatabaseButton.addEventListener("click", function() {				
    					clearSentenceDatabase('$projectKey');        
            	});
			</script>	
		</div>
		<div class="field-group">
			<label for="classifyAllIssuesInProject">Suggest Tags for Whole Project?</label>
			<input type="button" class="aui-button" id="classifyAllIssuesInProject" value="Classify all Comments" />
			<div class="description">Classifies decision knowledge for all issue comments for this project.</div>	
			<div id="progress-bar" class="aui-progress-indicator">
			    <span class="aui-progress-indicator-value"></span>
			</div>		
			<script>
				AJS.progressBars.update("#progress-bar", 0.0);
				var classifyAllIssuesInProjectButton = document.getElementById("classifyAllIssuesInProject");
				classifyAllIssuesInProjectButton.addEventListener("click", function() {
					if (confirm('Are you sure you want to classify all issue comments? This might take some time if the project is big.')) {
						AJS.progressBars.setIndeterminate("#progress-bar");
                		var isSucceeded = classifyWholeProject('$projectKey'); 
                		AJS.progressBars.update("#progress-bar", isSucceeded);               		
                	}
            	});
			</script>	
		</div>
		
		<h2>Decision Knowledge Extraction from Git</h2>
		<div class="field-group">
			<label for="isKnowledgeExtractedFromGit-toggle">Extract from
				Git?</label>
			<aui-toggle id="isKnowledgeExtractedFromGit-toggle"
				value="$projectKey" label="Extract from	Git?"></aui-toggle>
			<script>
				var gitToggle = document.getElementById('isKnowledgeExtractedFromGit-toggle');
					if ($project.isKnowledgeExtractedFromGit() == true) {
						gitToggle.checked = true;
					} else {
						gitToggle.checked = false;
					};
				gitToggle.addEventListener('change', function(error) {
					this.busy = true;
					setKnowledgeExtractedFromGit(this.checked, this.value);
					this.busy = false;
				});
            </script>
			<div class="description">Enables or disables whether decision
				knowledge is extracted from Git for this project. You need to install the 
				<a href="https://bigbrassband.com/" target="_blank">
					Git Integration for JIRA plugin
				</a> when enabled.
			</div>
		</div>
		
		<h2>Webhook</h2>
		<div class="field-group">
            <label for="isWebhookEnabled-toggle">Webhook Activated?</label>
            <aui-toggle id="isWebhookEnabled-toggle"
                        value="$projectKey" label="Webhook Activated?"></aui-toggle>
            <div class="description">Activates or deactivates the webhook for this project. If the webhook is activated,
            		it is triggered whenever a decision knowledge element or a link between elements is changed. 
            		Then, a key value JSON string is sent to the URL. 
            		The key is the key of the root element and the value is the Treant JSON string.</div>
        </div>
        <div class="field-group">
			<label for="webhook-type">Root Element Type:</label>
			<select id="webook-type" name="webhook-type" class="select medium-field" 
					onchange="setWebhookType(this.options[this.selectedIndex].value, '$projectKey')"></select>
			#foreach ($issueType in $issueTypes) 
				<script>
					var isSelected = "";
					if ('$issueType'.localeCompare('$project.getWebhookRootType()') == 0) {
						isSelected = "selected ";
					}
					$("select[name='webhook-type']")[0].insertAdjacentHTML("beforeend", "<option " + isSelected + "value='"
						+ '$issueType' + "'>" + '$issueType' + "</option>");
				</script>	
			#end
            <div class="description">Selects the issue type of the root element (key) of the webhook data.</div>
        </div>
        <div class="field-group">
			<label for="webhook-url">URL</label> <input type="text"
				class="text long-field" id="webhook-url" value="$project.getWebhookUrl()" />
			<div class="description">URL that decision knowledge is posted
				to when updated.</div>
		</div>
		<div class="field-group">
			<label for="webhook-secret">Shared Secret</label> <input type="text"
				class="text long-field" id="webhook-secret" value="$project.getWebhookSecret()" />
			<div class="description">Key to authenticate with remote
				server.</div>				
			<input type="button" id="submitWebhook" class="aui-button aui-button-primary" value="Set Webhook URL and Secret" />
		</div>

		<script>
			var webhookToggle = document.getElementById('isWebhookEnabled-toggle');
            if ($project.isWebhookEnabled() == true) {
                webhookToggle.checked = true;
            } else {
                webhookToggle.checked = false;
            };
            webhookToggle.addEventListener('change', function(error) {
                this.busy = true;
                setWebhookEnabled(this.checked, this.value);
                this.busy = false;
            });                    

			var webHookSubmit = document.getElementById('submitWebhook');
			webHookSubmit.addEventListener("click", function() {
				var urlInput = document.getElementById("webhook-url");
				var secretInput = document.getElementById("webhook-secret");
                setWebhookData('$projectKey', urlInput.value, secretInput.value);
                window.onbeforeunload = null;
            });
		</script>

		
	</form>
</body>
</html>
<div>
    <aui-spinner size="large" id="loading-spinner"></aui-spinner>
</div>

<table class="aui aui-table-list" id="results-table">
    <thead>
    <tr>
        <th id="th-key" class="aui-table-column-issue-key">Issue key</th>
        <th id="th-name">Name</th>
        <th id="th-score">Score</th>

        <th id="th-options" class="aui-table-column-unsortable">Options</th>
    <tr>
    </thead>
    <tbody id="table-content">
    <!--<tr>
        <td>TEST-12</td>
        <td>Cannot sort tables</td>
        <td>Table sorting should be allowed</td>
    </tr>-->

    </tbody>
</table>

#parse("templates/dialogs/linkDecisionsDialog.vm")


<script>
    const loadingSpinnerElement = document.getElementById("loading-spinner");
    const resultsTableElement = document.getElementById("results-table");
    const resultsTableContentElement = document.getElementById("table-content");
    const targetIssueDialogDisplay = document.getElementById("target-issue-dialog-display");
    const linkTypeSelectElement = AJS.$("#link-type-select")[0];


    function discardSuggestion(otherIssueKey) {
        resultsTableElement.style.visibility = "visible";

        console.log("---- Discard Issues ----");
        let baseIssueKey = conDecAPI.getIssueKey();
        let projectKey = conDecAPI.getProjectKey();
        console.log(baseIssueKey + " <-> " + otherIssueKey);
        console.log("---------------");

        consistencyAPI.discardLinkSuggestion(baseIssueKey, otherIssueKey, projectKey)
            .then((data) => {
                conDecAPI.showFlag("success", "Discarded suggestion sucessfully!");
                loadData();
            })
            .catch((error) => conDecAPI.showFlag("error", "Could not discard suggestion! </br>" + error));
    }


    //-----------------------------------------
    //            Generate table
    //-----------------------------------------
    let displayRelatedIssues = function (relatedIssues) {
        if (relatedIssues.length === 0) {
            //reset table content to empty
            resultsTableContentElement.innerHTML = "<i>No related issues found!</i>";
        } else {
            //reset table content to empty
            resultsTableContentElement.innerHTML = "";
            //append table rows with possibly related issues
            for (let relatedIssue of relatedIssues) {
                let row = generateTableRow(relatedIssue);
                resultsTableContentElement.appendChild(row);
            }
        }

    };

    let generateTableRow = function (relatedIssue) {
        let row = document.createElement("tr");
        row.appendChild(generateTableCell(`<a href="${relatedIssue.key}">${relatedIssue.key}</a>`, "th-key"));
        row.appendChild(generateTableCell(relatedIssue.summary, "th-name", {}));
        let scoreCell = (generateTableCell(relatedIssue.score, "th-score", {"title": relatedIssue.results.scores}));
        AJS.$(scoreCell).tooltip();
        row.appendChild(scoreCell);

        row.appendChild(generateTableCell(generateOptionButtons(relatedIssue), "th-options"));
        return row;
    };

    let generateTableCell = function (content, headersId, attributes) {
        let tableCell = document.createElement("td");
        tableCell.headers = headersId;
        tableCell.innerHTML = content;
        for (let key in attributes) {
            console.log(attributes[key]);
            tableCell[key] = JSON.stringify(attributes[key]);
        }
        return tableCell
    };

    let generateOptionButtons = function (relatedIssue) {
        return `<button class='aui-button aui-button-primary' onclick="showDialog('${relatedIssue.id}')"> <span class='aui-icon aui-icon-small aui-iconfont-link'></span> Link </button>` +
            `<button class='aui-button aui-button-removed' onclick="discardSuggestion('${relatedIssue.key}')"> <span class="aui-icon aui-icon-small aui-iconfont-trash"></span> Discard suggestion </button>`;
    };

    let showDialog = function (targetIssueId) {
        conDecDialog.showDecisionLinkDialog(JIRA.Issue.getIssueId(), targetIssueId, "i", "i", loadData);
    }

    let processRelatedIssuesResponse = function (response) {
        return response.relatedIssues.map(suggestion => {
            suggestion.score = Math.round(suggestion.score * 1000) / 1000.;
            return suggestion;
        }).sort((a, b) => b.score - a.score);
    }

    //-----------------------------------------
    // Load data and call display logic.
    //-----------------------------------------
    function loadData() {
        resultsTableElement.style.visibility = "hidden";
        loadingSpinnerElement.style.display = "flex";

        console.log("---- Related Issues ----");
        let issueKey = conDecAPI.getIssueKey();
        let projectKey = conDecAPI.getProjectKey();
        //console.log("---------------");

        consistencyAPI.loadRelatedIssues(issueKey)
            .then((data) => displayRelatedIssues(processRelatedIssuesResponse(data)))
            .catch((error) => conDecAPI.showFlag("error", "Could not load related issues! </br>" + error))
            .finally(() => {
                loadingSpinnerElement.style.display = "none";
                resultsTableElement.style.visibility = "visible";
            });
    }

    /**
     * Load data when tab is selected.
     */
    AJS.$("#visualization-selection-tabs").on("tabSelect", function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.target.href === undefined) {
            return;
        }
        if (event.target.href.includes("#related-issues-tab")) {
            loadData();
        }
    });

</script>
<div>
    <aui-spinner size="large" id="loading-spinner"></aui-spinner>
</div>

<table class="aui aui-table-list" id="results-table">
    <thead>
    <tr>
        <th id="th-key" class="aui-table-column-issue-key">Issue key</th>
        <th id="th-name">Name</th>
        <th id="th-score">Score</th>

        <th id="th-options" class="aui-table-column-unsortable">Options</th>
    <tr>
    </thead>
    <tbody id="table-content">
    <!--<tr>
        <td>TEST-12</td>
        <td>Cannot sort tables</td>
        <td>Table sorting should be allowed</td>
    </tr>-->

    </tbody>
</table>

#parse("templates/dialogs/linkIssuesDialog.vm")


<script>
    const loadingSpinnerElement = document.getElementById("loading-spinner");
    const resultsTableElement = document.getElementById("results-table");
    const resultsTableContentElement = document.getElementById("table-content");
    const targetIssueDialogDisplay = document.getElementById("target-issue-dialog-display");
    const linkTypeSelectElement = AJS.$("#link-type-select")[0];



    function discardSuggestion(otherIssueKey) {
        resultsTableElement.style.visibility = "visible";

        console.log("---- Discard Issues ----");
        let baseIssueKey = conDecAPI.getIssueKey();
        let projectKey = conDecAPI.getProjectKey();
        console.log(baseIssueKey + " <-> " + otherIssueKey);
        console.log("---------------");

        conDecAPI.discardLinkSuggestion(baseIssueKey, otherIssueKey, projectKey)
            .then((data) => {
                conDecAPI.showFlag("success", "Discarded suggestion sucessfully!");
                loadData();
            })
            .catch((error) => conDecAPI.showFlag("error", "Could not discard suggestion! </br>" + error));
    }

    //-----------------------------------------
    // Link issues dialog
    //-----------------------------------------

    /**
     * Fills the selection of the link-issues dialog.
     *
     * @param options object of existing link types
     */
    function fillLinkSelectOptions(options) {
        for (let option of options) {
            //create outward link
            let linkOption = document.createElement("option");
            linkOption.value = option.name;
            linkOption.innerText = option.outward;
            linkTypeSelectElement.appendChild(linkOption);

            //create inward link
            //linkOption = document.createElement("option");
            //linkOption.value = option.name;
            //linkOption.innerText = option.inward;
            //linkTypeSelectElement.appendChild(linkOption);
            //console.log(option.outward);
        }
    }

    /**
     * Sends API call to link two issues.
     *
     * @param baseIssueKey outward issue
     * @param targetIssueKey inward issue
     * @param linkType type of link from outward to inward issue
     * @returns {Promise<void>}
     */
    async function linkIssues(baseIssueKey, targetIssueKey, linkType) {
        //https://docs.atlassian.com/software/jira/docs/api/REST/8.5.4/#api/2/issueLink-linkIssues
        console.log(generateLinkIssueJson(baseIssueKey, targetIssueKey, linkType));
        generalApi.postJSONReturnPromise("/jira/rest/api/2/issueLink", generateLinkIssueJson(baseIssueKey, targetIssueKey, linkType))
            .then(() => {
                loadData();
                conDecAPI.showFlag("success", "Linked suggestion successfully!");
            }).catch( e => conDecAPI.showFlag("error", "An error occurred when linking the issues!"))

    }

    /**
     * Helper function to generate valid JSON for link-issues API call.
     */
    function generateLinkIssueJson(baseIssueKey, targetIssueKey, linkType) {
        return {
            "type": {
                "name": linkType
            },
            "inwardIssue": {
                "key":  targetIssueKey
            },
            "outwardIssue": {
                "key":  baseIssueKey
            }
        };
    }

    /**
     * Shows the dialog when the "Show dialog" button is clicked
     *
     */
    function showDialog(targetIssueKey) {
        AJS.dialog2("#link-issue-dialog").show();
        displayTargetIssue(targetIssueKey);
        //load issue link types: https://docs.atlassian.com/software/jira/docs/api/REST/8.5.4/#api/2/issueLinkType
        generalApi.getJSONReturnPromise(AJS.contextPath() + "/rest/api/2/issueLinkType")
            .then((data) => fillLinkSelectOptions(data.issueLinkTypes))
            .catch(error => conDecAPI.showFlag("error", error.toString()))
    }


    function displayTargetIssue(targetIssueKey) {
        targetIssueDialogDisplay.innerText = targetIssueKey;//`Link current issue to issue ${targetIssueKey}`;
    }

    /**
     * Event listener for when link issues is confirmed in dialog.
     */
    AJS.$("#link-issue-dialog-submit-button").on('click', function (e) {
        e.preventDefault();
        AJS.dialog2("#link-issue-dialog").hide();

        let selectedLinkType = linkTypeSelectElement.selectedOptions[0].value;
        linkIssues(conDecAPI.getIssueKey(), targetIssueDialogDisplay.innerText, selectedLinkType);
        loadData();
    });

    // Hides the dialog
    AJS.$("#link-issue-dialog-cancel-button").on('click', function (e) {
        e.preventDefault();
        AJS.dialog2("#link-issue-dialog").hide();
    });

    //-----------------------------------------
    //            Generate table
    //-----------------------------------------

    let displayRelatedIssues = function (relatedIssues) {
        if (relatedIssues.length === 0){
            //reset table content to empty
            resultsTableContentElement.innerHTML = "<i>No related issues found!</i>";
        }else{
            //reset table content to empty
            resultsTableContentElement.innerHTML = "";
            //append table rows with possibly related issues
            for (let relatedIssue of relatedIssues) {
                let row = generateTableRow(relatedIssue);
                resultsTableContentElement.appendChild(row);
            }
        }

    };

    let generateTableRow = function (relatedIssue) {
        let row = document.createElement("tr");
        row.appendChild(generateTableCell(`<a href="${relatedIssue.key}">${relatedIssue.key}</a>`, "th-key"));
        row.appendChild(generateTableCell(relatedIssue.summary, "th-name"));
        row.appendChild(generateTableCell(relatedIssue.score, "th-score"));

        row.appendChild(generateTableCell(generateOptionButtons(relatedIssue), "th-options"));
        return row;
    };

    let generateTableCell = function (content, headersId) {
        let tableCell = document.createElement("td");
        tableCell.headers = headersId;
        tableCell.innerHTML = content;
        return tableCell
    };

    let generateOptionButtons = function (relatedIssue) {
        return `<button class='aui-button aui-button-primary' onclick="showDialog('${relatedIssue.key}')"> <span class='aui-icon aui-icon-small aui-iconfont-link'></span> Link </button>` +
            `<button class='aui-button aui-button-removed' onclick="discardSuggestion('${relatedIssue.key}')"> <span class="aui-icon aui-icon-small aui-iconfont-trash"></span> Discard </button>`;
    };

    let processRelatedIssuesResponse = function (response) {
        return response.relatedIssues.map(suggestion => {
            suggestion.score = Math.round(suggestion.score*1000)/1000.;
            return suggestion;
        }).sort((a,b) => b.score-a.score).filter(suggestion => suggestion.score >0.3)
    }

    //-----------------------------------------
    // Load data and init loading.
    //-----------------------------------------

    function loadData() {
        resultsTableElement.style.visibility = "hidden";
        loadingSpinnerElement.style.display = "flex";

        console.log("---- Related Issues ----");
        let issueKey = conDecAPI.getIssueKey();
        let projectKey = conDecAPI.getProjectKey();
        //console.log("---------------");

        conDecAPI.loadRelatedIssues(issueKey, projectKey)
            .then((data) => displayRelatedIssues(processRelatedIssuesResponse(data)))
            .catch((error) => conDecAPI.showFlag("error", "Could not load related issues! </br>" + error))
            .finally(() => {
                loadingSpinnerElement.style.display = "none";
                resultsTableElement.style.visibility = "visible";
            });
    }

    //load data when page finished loading!
    window.addEventListener("load", function (event) {
        //loadingSpinnerElement.style.display = "visible";
        //resultsTableElement.style.visibility = "none";
        loadData();

    }, false);



</script>